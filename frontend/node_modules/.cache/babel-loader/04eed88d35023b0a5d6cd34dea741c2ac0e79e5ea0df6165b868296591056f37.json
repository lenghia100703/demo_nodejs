{"ast":null,"code":"import axios from 'axios';\nimport jwt_decode from 'jwt-decode';\nimport { loginSuccess } from './redux/authSlice';\nconst refreshToken = async () => {\n  try {\n    const res = await axios.post('http://localhost:8000/v1/auth/refresh', {\n      withCredentials: true\n    });\n    return res.data;\n  } catch (err) {\n    console.log(err);\n  }\n};\nexport const createAxios = (user, dispatch) => {\n  const newInstance = axios.create();\n  newInstance.interceptors.request.use(async config => {\n    let date = new Date();\n    const decodeToken = jwt_decode(user === null || user === void 0 ? void 0 : user.accessToken);\n    if (decodeToken.exp < date.getTime() / 1000) {\n      const data = await refreshToken();\n      const refreshUser = {\n        ...user,\n        accessToken: data.accessToken\n      };\n      dispatch(loginSuccess(refreshUser));\n      config.headers['token'] = 'Bearer ' + data.accessToken;\n    }\n    return config;\n  }, err => {\n    return Promise.reject(err);\n  });\n  return newInstance;\n};","map":{"version":3,"names":["axios","jwt_decode","loginSuccess","refreshToken","res","post","withCredentials","data","err","console","log","createAxios","user","dispatch","newInstance","create","interceptors","request","use","config","date","Date","decodeToken","accessToken","exp","getTime","refreshUser","headers","Promise","reject"],"sources":["D:/JS/nodejs/jwt-demo/frontend/src/createInstance.js"],"sourcesContent":["import axios from 'axios';\r\nimport jwt_decode from 'jwt-decode';\r\nimport { loginSuccess } from './redux/authSlice';\r\n\r\nconst refreshToken = async () => {\r\n    try {\r\n        const res = await axios.post('http://localhost:8000/v1/auth/refresh', {\r\n            withCredentials: true,\r\n        });\r\n        return res.data;\r\n    } catch (err) {\r\n        console.log(err);\r\n    }\r\n};\r\n\r\nexport const createAxios = (user, dispatch) => {\r\n    const newInstance = axios.create();\r\n\r\n    newInstance.interceptors.request.use(\r\n        async (config) => {\r\n            let date = new Date();\r\n            const decodeToken = jwt_decode(user?.accessToken);\r\n            if (decodeToken.exp < date.getTime() / 1000) {\r\n                const data = await refreshToken();\r\n                const refreshUser = {\r\n                    ...user,\r\n                    accessToken: data.accessToken,\r\n                };\r\n                dispatch(loginSuccess(refreshUser));\r\n                config.headers['token'] = 'Bearer ' + data.accessToken;\r\n            }\r\n            return config;\r\n        },\r\n        (err) => {\r\n            return Promise.reject(err);\r\n        },\r\n    );\r\n    return newInstance;\r\n};\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,UAAU,MAAM,YAAY;AACnC,SAASC,YAAY,QAAQ,mBAAmB;AAEhD,MAAMC,YAAY,GAAG,MAAAA,CAAA,KAAY;EAC7B,IAAI;IACA,MAAMC,GAAG,GAAG,MAAMJ,KAAK,CAACK,IAAI,CAAC,uCAAuC,EAAE;MAClEC,eAAe,EAAE;IACrB,CAAC,CAAC;IACF,OAAOF,GAAG,CAACG,IAAI;EACnB,CAAC,CAAC,OAAOC,GAAG,EAAE;IACVC,OAAO,CAACC,GAAG,CAACF,GAAG,CAAC;EACpB;AACJ,CAAC;AAED,OAAO,MAAMG,WAAW,GAAGA,CAACC,IAAI,EAAEC,QAAQ,KAAK;EAC3C,MAAMC,WAAW,GAAGd,KAAK,CAACe,MAAM,EAAE;EAElCD,WAAW,CAACE,YAAY,CAACC,OAAO,CAACC,GAAG,CAChC,MAAOC,MAAM,IAAK;IACd,IAAIC,IAAI,GAAG,IAAIC,IAAI,EAAE;IACrB,MAAMC,WAAW,GAAGrB,UAAU,CAACW,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEW,WAAW,CAAC;IACjD,IAAID,WAAW,CAACE,GAAG,GAAGJ,IAAI,CAACK,OAAO,EAAE,GAAG,IAAI,EAAE;MACzC,MAAMlB,IAAI,GAAG,MAAMJ,YAAY,EAAE;MACjC,MAAMuB,WAAW,GAAG;QAChB,GAAGd,IAAI;QACPW,WAAW,EAAEhB,IAAI,CAACgB;MACtB,CAAC;MACDV,QAAQ,CAACX,YAAY,CAACwB,WAAW,CAAC,CAAC;MACnCP,MAAM,CAACQ,OAAO,CAAC,OAAO,CAAC,GAAG,SAAS,GAAGpB,IAAI,CAACgB,WAAW;IAC1D;IACA,OAAOJ,MAAM;EACjB,CAAC,EACAX,GAAG,IAAK;IACL,OAAOoB,OAAO,CAACC,MAAM,CAACrB,GAAG,CAAC;EAC9B,CAAC,CACJ;EACD,OAAOM,WAAW;AACtB,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}